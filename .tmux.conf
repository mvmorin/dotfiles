################################################################################
# unbind all default keybinds except root and copy-mode-vi
################################################################################
unbind -a -T prefix
unbind -a -T copy-mode

################################################################################
# basics
################################################################################
set -g prefix C-Space
bind C-Space send-prefix

set -g history-limit 10000
set -w -g wrap-search off
set -g set-clipboard on
set -g detach-on-destroy off
set -g renumber-windows on

# Set a default layout
set -g other-pane-width 85
set -sa command-alias layout='select-layout main-vertical'

# Fix home and end keys
bind -n Home send Escape "OH"
bind -n End send Escape "OF"

# force truecolor support support
set -g default-terminal "xterm-256color"
set -ga terminal-overrides ",xterm-256color:Tc"

################################################################################
# deal with nested ssh-tmux session
################################################################################
# add C-t C-t binding to lock/unlock tmux for nested use. See the
# 'tmux-nested-lock' script for more info.
bind -T root C-t switch-client -T root-2nd-key
bind -T root-2nd-key C-t run-shell 'tmux-nested-lock -l'

bind -T disable-bindings C-t switch-client -T disable-bindings-2nd-key
bind -T disable-bindings-2nd-key C-t run-shell 'tmux-nested-lock -u'

# auto unlock when pane exits and auto-reformat layout
set-hook -g pane-exited 'layout ; run-shell "tmux-nested-lock -u"'

################################################################################
# input behaviour and modes
################################################################################
set -g escape-time 0
set -g mouse on

set -g status-keys vi
set -g mode-keys vi

# Fix some weird copy mode bindings
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi Space send -X cursor-right
bind -T copy-mode-vi y send -X copy-selection-and-cancel

# Enable scroll wheel in copy-mode
bind -T copy-mode-vi WheelUpPane send -t'{mouse}' -N 3 -X scroll-up
bind -T copy-mode-vi WheelDownPane send -t'{mouse}' -N 3 -X scroll-down

# don't copy when releasing selection, only stop selection
bind -T copy-mode-vi MouseDragEnd1Pane send -t'{mouse}' -X stop-selection

# emulate scrolling by sending up and down keys in less and similar
bind-key -T root WheelUpPane \
	if-shell -Ft= '#{?mouse_any_flag,1,#{pane_in_mode}}' \
		'send -Mt=' \
		'if-shell -t= "#{?alternate_on,true,false}" "send -t= -N 3 Up" "copy-mode -et="'

bind-key -T root WheelDownPane \
	if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
		'send -Mt=' \
		'if-shell -t= "#{?alternate_on,true,false}" "send -t= -N 3 Down" "send -Mt="'


################################################################################
# prefix commands
################################################################################
# Basic commands
bind c copy-mode
bind v paste-buffer
bind ? list-keys
bind : command-prompt
bind z source-file ~/.tmux.conf \; display "~/.tmux.conf reloaded"

# window manegement
bind r command-prompt -I "#W" "rename-window -- '%%'"
bind f command-prompt "find-window -- '%%'"
bind w choose-tree -Zw

# session manegment
# switch-client -p/-n to cycle sessions
bind d detach-client
bind s choose-tree -Zs
bind R command-prompt -I "#S" "rename-session -- '%%'"

bind g command-prompt -p "New session:" \
	"if-shell -F '%1' \
		'new-session -A -s %1' \
		'new-session'"
bind t command-prompt -p "Move window to session:" \
	"if-shell 'tmux has-session -t %1' \
		'move-window -a -t %1:#\$ \; attach-session -t %1:#\$' \
		'new-session -d -s %1 \; move-window -k -t %1:^ \; attach-session -t %1'"


################################################################################
# non-prefix keybindings - hopefully Alt-bindings won't conflict too much
################################################################################
# new/quit pane
bind -n M-n split-window -b -c '#{pane_current_path}' \; layout

# focus panes
# marks? (select-pane -m/-M)
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# move panes
bind -n M-J swap-pane -D
bind -n M-K swap-pane -U
bind -n M-H if-shell -F '#{==:#P,0}' \
	"swap-pane -d -s 1" \
	"move-pane -s :. -t 0 \; swap-pane -s 0 \; layout"
bind -n M-L if-shell -F '#{==:#P,0}' \
	"swap-pane -d -s 1 \; select-pane -t 1" \
	"select-pane -t 0 \; swap-pane -s :.!"

# window manegement
bind -n M-o new-window \; layout
bind -n M-i next-window \; layout
bind -n M-u previous-window \; layout

# move pane to new/next/prev window
bind -n M-O break-pane \; layout
bind -n M-I move-pane -s :. -t :+.0 \; swap-pane -s 0 \; layout
bind -n M-U move-pane -s :. -t :-.0 \; swap-pane -s 0 \; layout

# maximize and reformat layout
bind -n M-m resize-pane -Z
bind -n M-. layout # this should not really never be needed, see pane-exited hook


################################################################################
# looks
################################################################################
# status bar layout
set -g status-position top
set -g status-interval 60

set -g status-left-length 40
set -g status-left '[#S] #[fg=colour5]:: '
set -g window-status-separator ' '
set -g window-status-format '[#I:#W#F]'
set -g window-status-current-format '[#I:#W#F]'
set -g status-right "%H:%M #[fg=colour5]::#[fg=default] [$USER@#h]"

# status bar colors
set -g status-left-style bg=colour0,fg=colour2
set -g status-style bg=colour0,fg=colour6
set -g status-right-style bg=colour0,fg=colour2

set -g window-status-current-style bg=colour6,fg=colour0
set -g window-status-style bg=default,fg=default
set -g window-status-last-style bg=default,fg=default
set -g window-status-bell-style bg=colour1,fg=colour0
set -g window-status-activity-style bg=colour1,fg=colour0

# mode colors
set -g message-command-style bg=colour0,fg=colour3
set -g message-style bg=colour0,fg=colour3
set -g mode-style bg=colour3,fg=colour0

# pane border colors
set -g pane-border-status top
set -g pane-border-format ''
set -g pane-border-style fg=colour8,bg=colour0
set -g pane-active-border-style fg=colour6,bg=colour0
